name: Daily News Aggregation (Advanced)

on:
  schedule:
    # Run every day at 6:05 AM EST (11:05 AM UTC)
    - cron: '5 11 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  aggregate-news:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create config file
      run: |
        cat > config.json << EOF
        {
          "cypher_api_key": "${{ secrets.CYPHER_API_KEY }}",
          "newsapi_key": "${{ secrets.NEWSAPI_KEY }}",
          "hours_back": 24,
          "story_limit": 150,
          "log_level": "INFO",
          "log_file": "logs/cronkite.log",
          "log_format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
          "disable_console": false
        }
        EOF
        
    - name: Create logs directory
      run: mkdir -p logs
      
    - name: Run news aggregator
      id: run-aggregator
      run: |
        python cronkite.py > news_report.txt 2>&1
        exit_code=$?
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        echo "Exit code: $exit_code" >> news_report.txt
        
    - name: Upload news report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: daily-news-report-${{ github.run_number }}
        path: news_report.txt
        retention-days: 30
        
    - name: Create GitHub Issue with Report
      if: steps.run-aggregator.outputs.exit_code == '0'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('news_report.txt', 'utf8');
          
          // Extract just the news report (remove logs)
          const lines = report.split('\n');
          const reportStart = lines.findIndex(line => line.includes('Armed conflicts and attacks') || line.includes('Politics and elections'));
          const reportEnd = lines.findIndex(line => line.includes('Exit code:'));
          
          let reportContent = '';
          if (reportStart !== -1 && reportEnd !== -1) {
            reportContent = lines.slice(reportStart, reportEnd).join('\n');
          } else {
            reportContent = report;
          }
          
          const issueTitle = `Daily News Report - ${new Date().toISOString().split('T')[0]}`;
          const issueBody = `## Daily News Report
          
          **Generated:** ${new Date().toISOString()}
          **Run Number:** ${context.runNumber}
          
          ### News Summary
          
          \`\`\`
          ${reportContent}
          \`\`\`
          
          ---
          
          *This report was automatically generated by the Cronkite News Aggregator.*
          
          **Artifacts:**
          - [Full Report with Logs](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['daily-news', 'automated']
          });
          
    - name: Send Email Notification (Optional)
      if: always() && secrets.EMAIL_PASSWORD
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "Daily News Report - ${{ github.run_number }}"
        to: ${{ secrets.EMAIL_TO }}
        from: "Cronkite News Aggregator"
        body: |
          Daily News Report has been generated.
          
          Run Number: ${{ github.run_number }}
          Status: ${{ steps.run-aggregator.outputs.exit_code == '0' && 'Success' || 'Failed' }}
          
          View the full report and logs at:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
    - name: Create summary
      run: |
        echo "## Daily News Aggregation Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Run Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.run-aggregator.outputs.exit_code == '0' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f news_report.txt ]; then
          echo "**Report Generated:** ✅" >> $GITHUB_STEP_SUMMARY
          echo "**Report Size:** $(wc -c < news_report.txt) bytes" >> $GITHUB_STEP_SUMMARY
          
          # Show a preview of the report
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Preview:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -20 news_report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        else
          echo "**Report Generated:** ❌" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f logs/cronkite.log ]; then
          echo "**Logs Generated:** ✅ (not stored as artifact)" >> $GITHUB_STEP_SUMMARY
          echo "**Log Size:** $(wc -c < logs/cronkite.log) bytes" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Logs Generated:** ❌" >> $GITHUB_STEP_SUMMARY
        fi 